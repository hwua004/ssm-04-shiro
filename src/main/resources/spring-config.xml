<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd">

    <!--开启注解的扫描，spring的配置文件只扫描出了controller注解以外的注解，防止重复初始化-->
    <context:component-scan base-package="com.hwua">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!--引入属性文件jdbc.properties-->
    <context:property-placeholder location="classpath:jdbc.properties,classpath:redis.properties"/>

    <!--创建数据源-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <!--创建SqlSessionFactory-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <property name="mapperLocations" value="classpath:mappers/*Dao.xml"/>
        <property name="typeAliasesPackage" value="com.hwua.ssm.entity"/>
        <property name="plugins">
            <array>
                <ref bean="pageInterceptor"/>
            </array>
        </property>
    </bean>

    <!--注册分页插件-->
    <bean id="pageInterceptor" class="com.github.pagehelper.PageInterceptor">
        <property name="properties">
            <props>
                <prop key="helperDialect">mysql</prop>
            </props>
        </property>
    </bean>


    <!--mapper接口的扫描器，用来自动创建mapper（dao）的代理类-->
    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="basePackage" value="com.hwua.ssm.dao"/>
    </bean>

    <!--事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!--开启以注解的方式控制事务-->
    <tx:annotation-driven transaction-manager="transactionManager"/>


    <!--注册CacheManagerFactory,保留ehcache的缓存管理器，专门给shiro使用-->
    <bean id="ehCacheManagerFactoryBean" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
        <property name="configLocation" value="classpath:ehcache.xml"/>
    </bean>
    <!--注册一个cacheManager-->
    <bean id="ehCacheCacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
        <property name="cacheManager" ref="ehCacheManagerFactoryBean"/>
    </bean>
    <!--使用redis作为cacheManager-->
    <bean id="redisCacheManager" class="org.springframework.data.redis.cache.RedisCacheManager">
        <constructor-arg name="redisOperations" ref="redisTemplate"/>
    </bean>
    <!--开启注解的方式来控制缓存@Cacheable @Cacheput @CacheEvict-->
    <cache:annotation-driven cache-manager="redisCacheManager"/>



    <!--引入其他的配置文件-->
    <import resource="classpath:spring-shiro.xml"/>
    <import resource="classpath:spring-redis.xml"/>

</beans>